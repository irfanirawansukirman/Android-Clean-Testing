/*
 * Copyright Txus Ballesteros 2016 (@txusballesteros)
 *
 * This file is part of some open source application.
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 * Contact: Txus Ballesteros <txus.ballesteros@gmail.com>
 */
apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'

android {
    def globalConfiguration = rootProject.extensions.getByName("ext")

    compileSdkVersion globalConfiguration.getAt("androidCompileSdkVersion")
    buildToolsVersion globalConfiguration.getAt("androidBuildToolsVersion")

    defaultConfig {
        applicationId globalConfiguration.getAt("androidApplicationId")
        minSdkVersion globalConfiguration.getAt("androidMinSdkVersion")
        targetSdkVersion globalConfiguration.getAt("androidTargetSdkVersion")
        versionCode globalConfiguration.getAt("androidVersionCode")
        versionName globalConfiguration.getAt("androidVersionName")
        testInstrumentationRunner 'com.txusballesteros.testing.AndroidTestRunner'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }
    
    testOptions.unitTests.all {
        testLogging {
          events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
          outputs.upToDateWhen { false }
          showStandardStreams = true
        }
    }

    buildTypes {
        release {
            minifyEnabled false
        }
    }
}

dependencies {
    def mobileDependencies = rootProject.ext.mobileDependencies
    apt mobileDependencies.daggerCompiler
    provided mobileDependencies.javaxAnnotation
    compile mobileDependencies.dagger
    compile mobileDependencies.appcompat
    compile mobileDependencies.retrofit
    compile mobileDependencies.gsonConverter
    compile mobileDependencies.glide
    compile mobileDependencies.recyclerView
    compile mobileDependencies.butterKnife
    testCompile mobileDependencies.junit
    testCompile mobileDependencies.mockito
    androidTestApt mobileDependencies.daggerCompiler
    androidTestProvided mobileDependencies.javaxAnnotation
    androidTestCompile mobileDependencies.dagger
    androidTestCompile mobileDependencies.mockito
    androidTestCompile mobileDependencies.dexmaker
    androidTestCompile mobileDependencies.dexmaker_mockito
    androidTestCompile (mobileDependencies.espressoCore) {
        exclude module: 'support-annotations'
    }
    androidTestCompile (mobileDependencies.androidTestRunner) {
        exclude module: 'support-annotations'
    }
}
